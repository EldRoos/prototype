{"version":3,"sources":["SegmentedControl.tsx","App.tsx","reportWebVitals.js","index.js"],"names":["SegmentedControl","props","useState","selected","setSelected","className","styleClass","title","onClick","App","background","setBackground","changeBackground","event","target","value","type","id","name","onChange","defaultChecked","htmlFor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a87a3e14.chunk.js","sourcesContent":["import React, { FunctionComponent, useState } from 'react';\r\nimport './styles/app.scss';\r\nimport './styles/segmentedControl.scss';\r\n\r\nexport interface SegmentedControlProps {\r\n    title?: string;\r\n    styleClass?: string;\r\n    //children: string;\r\n}\r\n\r\n//export const SegmentedControl = (props: SegmentedControlProps) => (\r\nexport const SegmentedControl: FunctionComponent<SegmentedControlProps> = (\r\n    props: SegmentedControlProps\r\n): React.ReactElement<void> => {\r\n    const [selected, setSelected] = useState<number>(-1);\r\n\r\n    return (\r\n        <div\r\n            className={\r\n                'segmentedControl' +\r\n                (props.styleClass ? ' ' + props.styleClass : '')\r\n            }\r\n        >\r\n            <div>{props.title}</div>\r\n            <button\r\n                className={selected === 1 ? 'selected' : ''}\r\n                onClick={() => setSelected(1)}\r\n            >\r\n                BankID\r\n            </button>\r\n            <button\r\n                className={selected === 2 ? 'selected' : ''}\r\n                onClick={() => setSelected(2)}\r\n            >\r\n                DigiPass\r\n            </button>\r\n            <button\r\n                className={selected === 3 ? 'selected' : ''}\r\n                onClick={() => setSelected(3)}\r\n            >\r\n                BankID on File\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport './styles/app.scss';\r\nimport { SegmentedControl } from './SegmentedControl';\r\n\r\nfunction App() {\r\n    const [background, setBackground] = useState<string>('white');\r\n\r\n    const changeBackground = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setBackground(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"card\">\r\n                <div className=\"top\">\r\n                    <h1>Prototype</h1>\r\n                    <div>\r\n                        <label>Background:</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            id=\"white\"\r\n                            name=\"background\"\r\n                            value=\"white\"\r\n                            onChange={changeBackground}\r\n                            defaultChecked\r\n                        />\r\n                        <label htmlFor=\"white\">White</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            id=\"grey\"\r\n                            name=\"background\"\r\n                            value=\"grey\"\r\n                            onChange={changeBackground}\r\n                        />\r\n                        <label htmlFor=\"grey\">Grey</label>\r\n                        <input\r\n                            type=\"radio\"\r\n                            id=\"black\"\r\n                            name=\"background\"\r\n                            value=\"black\"\r\n                            onChange={changeBackground}\r\n                        />\r\n                        <label htmlFor=\"black\">Black</label>\r\n                    </div>\r\n                </div>\r\n                <div className={'side ' + background}>\r\n                    <h2>TODAY</h2>\r\n                    <br />\r\n                    <h3>Segmented Control</h3>\r\n                    <br />\r\n                    <SegmentedControl title=\"Normal\" />\r\n                    <br />\r\n                    <SegmentedControl title=\"Hover\" styleClass=\"hover\" />\r\n                    <br />\r\n                    <SegmentedControl title=\"Focus\" styleClass=\"focus\" />\r\n                    <br />\r\n                    <SegmentedControl\r\n                        title=\"Hover Focus\"\r\n                        styleClass=\"hover focus\"\r\n                    />\r\n                    <br />\r\n                    <SegmentedControl title=\"Select\" styleClass=\"selected\" />\r\n                    <br />\r\n                    <SegmentedControl\r\n                        title=\"Hover Select\"\r\n                        styleClass=\"hover selected\"\r\n                    />\r\n                    <br />\r\n                    <SegmentedControl\r\n                        title=\"Focus Select\"\r\n                        styleClass=\"focus selected\"\r\n                    />\r\n                    <br />\r\n                    <SegmentedControl\r\n                        title=\"Hover Focus Select\"\r\n                        styleClass=\"hover focus selected\"\r\n                    />\r\n                    <br />\r\n                    <SegmentedControl title=\"Disable\" styleClass=\"disabled\" />\r\n                </div>\r\n                <div className={'side ' + background}>\r\n                    <h2>TOMORROW</h2>\r\n                    <br />\r\n                    <h3>Segmented Control</h3>\r\n                    <br />\r\n                    <SegmentedControl title=\"Normal\" styleClass=\"new\" />\r\n                    <br />\r\n                    <SegmentedControl title=\"Hover\" styleClass=\"new hover\" />\r\n                    <br />\r\n                    <SegmentedControl title=\"Focus\" styleClass=\"new focus\" />\r\n                    <br />\r\n                    <SegmentedControl\r\n                        title=\"Hover Focus\"\r\n                        styleClass=\"new hover focus\"\r\n                    />\r\n                    <br />\r\n                    <SegmentedControl\r\n                        title=\"Select\"\r\n                        styleClass=\"new selected\"\r\n                    />\r\n                    <br />\r\n                    <SegmentedControl\r\n                        title=\"Hover Select\"\r\n                        styleClass=\"new hover selected\"\r\n                    />\r\n                    <br />\r\n                    <SegmentedControl\r\n                        title=\"Focus Select\"\r\n                        styleClass=\"new focus selected\"\r\n                    />\r\n                    <br />\r\n                    <SegmentedControl\r\n                        title=\"Hover Focus Select\"\r\n                        styleClass=\"new hover focus selected\"\r\n                    />\r\n                    <br />\r\n                    <SegmentedControl\r\n                        title=\"Disable\"\r\n                        styleClass=\"new disabled\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}